.contents,
smart-table-wrapper,
.table-responsive,
.table {
    height: 100%;
}

.table-responsive {
    overflow-x: visible;
}

.table-headers {
    display: table;
    overflow: auto;
    width: 100%;
    tr {
        position: relative;
    }
    th {
        padding: 4px 3px;
    }
}

.table {
    .table-body {
        display: block;
        width: 100%;
        // height: 100%;
        height: 700px;
        overflow: auto;
        td {
            padding: 2px 3px 3px 4px;
            width: 100%;
        }
    }
}

.frame {
    background-color: #f5f5f5;
}

.side-bar {
    padding-top: 30px;
    // background-color: magenta;
}

.contents {
    background-color: #fff;
    // background-color: #f5f5f5;
}

table {
    width: 100%;
}

thead,
tbody,
tr,
td,
th {
    display: block;
}

tr:after {
    content: ' ';
    display: block;
    visibility: hidden;
    clear: both;
}

thead th {
    height: 30px;
    text-transform: uppercase;
    &:hover {
      background-color: #0000ff;
    }
}

tbody {
    height: calc(100% - 95px);
    overflow-y: auto;
}

tbody td,
thead th {
    width: calc(100% / #{$table-header-num});
    float: left;
}

thead > tr {
    box-shadow: 1px 0 1px rgba(#000, .2);
}

.smart-table {
    tr:nth-child(1) {
        td {
            border-top: 0;
        }
    }
}

.btn-file {
    position: relative;
    overflow: hidden;
}

.btn-file input[type=file] {
    position: absolute;
    top: 0;
    right: 0;
    min-width: 100%;
    min-height: 100%;
    font-size: 100px;
    text-align: right;
    filter: alpha(opacity=0);
    opacity: 0;
    outline: none;
    background: cyan;
    cursor: inherit;
    display: block;
}

.st-selected {
    background-color: #2eb7ed;
}


/*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
*/

.repeated-item.ng-enter,
.repeated-item.ng-move {
    // transition: all 0.5s linear;
    animation: 0.2s slideIn;
    // opacity: 0;
}


/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/

.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
    opacity: 1;
}


/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/

.repeated-item.ng-leave {
    animation: 0.2s slideOut;
}

@keyframes slideOut {
    from {
        margin-left: 0%;
        width: 100%;
    }
    to {
        margin-left: 100%;
        width: 300%;
    }
}

@keyframes slideIn {
    from {
        margin-left: 100%;
        width: 300%;
    }
    to {
        margin-left: 0%;
        width: 100%;
    }
}

